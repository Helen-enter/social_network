{"version":3,"sources":["api/api.tsx","redux/dialogs-reducer.tsx","assets/base_87716f252d.jpg","common/Preloader/Preloader.tsx","App.module.css","assets/chat_icon.jpg","components/Navbar/Navbar.module.css","serviceWorker.js","redux/users-reducer.tsx","redux/auth-reducer.tsx","redux/app-reducer.tsx","redux/redux-store.tsx","components/Navbar/Navbar.tsx","components/Users/Paginator.tsx","components/Users/Users.tsx","redux/users-selectors.tsx","components/Users/UsersContainer.tsx","components/Header/Header.tsx","components/Header/HeaderContainer.tsx","components/Login/Login.tsx","App.tsx","index.tsx","components/Users/Users.module.css","common/FormsControls/FormsControls.tsx","utils/validators.tsx","common/FormsControls/FormsControls.module.css","components/Header/Header.module.css","assets/valentines-icegif-5.gif","redux/profile-reducer.tsx"],"names":["instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","get","then","response","data","follow","userId","post","unfollow","delete","getProfile","console","warn","profileAPI","getStatus","updateStatus","status","put","savePhoto","file","formData","FormData","append","saveProfile","profile","authAPI","me","res","login","email","password","rememberMe","captcha","logout","securityAPI","getCaptchaUrl","sendMessageAC","newMessageBody","type","InitialState","dialogsData","id","name","messagesData","message","dialogsReducer","state","action","body","module","exports","Preloader","preloader","src","Boolean","window","location","hostname","match","users","totalUsersCount","isFetching","followingInProgress","followSuccess","unfollowSuccess","setCurrentPageAC","toggleIsFetching","toggleIsFollowingProgress","followUnfollowFlow","dispatch","apiMethod","actionCreator","a","resultCode","SET_USER_DATA","isAuth","captchaUrl","setAuthUserData","getCaptchaUrlSuccess","payload","getAuthUserData","initialised","reducers","combineReducers","profilePage","profileReducer","messagesPage","usersPage","map","u","followed","count","filter","auth","form","formReducer","app","store","createStore","applyMiddleware","thunk","Navbar","className","s","nav","to","activeClassName","active","Paginator","props","pagesCount","Math","ceil","totalItemsCount","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","styles","paginator","onClick","p","cn","selectedPage","pageNumber","key","e","onPageChanged","Users","portionSize","photo","photos","small","photoCat","disabled","some","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","UsersContainer","requestUsers","this","setUsers","setCurrentPage","React","Component","connect","bind","items","totalCount","Header","header","Logo","loginBlock","HeaderContainer","LoginReduxForm","reduxForm","handleSubmit","error","onSubmit","Field","validate","requiredField","placeholder","component","Input","formSummaryError","url","messages","length","stopSubmit","_error","DialogsContainer","lazy","ProfileContainer","App","catchAllUnhandledError","PromiseRejectionEvent","log","initializeApp","addEventListener","removeEventListener","appWrapper","path","render","fallback","compose","withRouter","promise","Promise","all","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","FormControl","meta","touched","children","hasError","Textarea","input","restProps","child","value","maxLengthCreator","maxLength","addPostAC","newPostText","setStatus","getUserProfile","getState","reject","postData","likesCount","newPost"],"mappings":"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","file":"static/js/main.f351ad6f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport axios from \"axios\";\r\nimport {ProfileType} from \"../redux/profile-reducer\";\r\nimport {UsersDataType} from \"../components/Users/Users\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': 'fb3a72fc-b182-466b-85fc-baa514f38724'\r\n    }\r\n})\r\n\r\ntype DataType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\n\r\ntype MeResponseType = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: DataType\r\n}\r\n\r\ntype GetUsersItems = {\r\n    items: Array<UsersDataType>\r\n    totalCount: number\r\n    error: string | null\r\n}\r\n\r\ntype ResponseType<D = {}> = {\r\n    data: D\r\n    messages: Array<string>\r\n    resultCode: number\r\n}\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage = 1, pageSize = 10) {\r\n        return instance.get<GetUsersItems>(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<ResponseType<DataType>>(`follow/${userId}`)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete<ResponseType<DataType>>(`follow/${userId}`)\r\n    },\r\n    getProfile(userId: number | null) {\r\n        console.warn('Obsolete method. Please profileAPI object.')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number | null) {\r\n        return instance.get<ProfileType>(`profile/` + userId);\r\n    },\r\n    getStatus(userId: number) {\r\n        return instance.get<string>(`profile/status/` + userId);\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put<ResponseType>(`profile/status`, {status: status});\r\n    },\r\n    savePhoto(file: File) {\r\n        let formData = new FormData()\r\n        formData.append('image', file)\r\n        return instance.put(`profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data'\r\n            }\r\n        });\r\n    },\r\n    saveProfile(profile: ProfileType | null) {\r\n        return instance.put<ResponseType>(`profile`, profile);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get<MeResponseType>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: any) {\r\n        return instance.post(`auth/login`, {email, password, rememberMe, captcha});\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}\r\n\r\nexport const securityAPI = {\r\n    getCaptchaUrl() {\r\n        return instance.get(`security/get-captcha-url`);\r\n    }\r\n}","import React from \"react\";\r\nimport {ActionsType, DialogsDataType, messagesDataType} from \"./store\";\r\n\r\nconst SEND_MESSAGE = 'SEND-MESSAGE'\r\n\r\nexport type sendMessageACType = ReturnType<typeof sendMessageAC>\r\n\r\nexport const sendMessageAC = (newMessageBody: string) => {\r\n    return {\r\n        type: SEND_MESSAGE,\r\n        newMessageBody\r\n    } as const\r\n}\r\n\r\nlet InitialState: InitialStateDialogsReducerType = {\r\n    dialogsData: [\r\n        {id: 1, name: 'Petr'},\r\n        {id: 2, name: 'Dmitriy'},\r\n        {id: 3, name: 'Andrey'},\r\n        {id: 4, name: 'Svetlana'},\r\n        {id: 5, name: 'Elena'},\r\n    ],\r\n    messagesData: [\r\n        {id: 1, message: 'Hi!'},\r\n        {id: 2, message: 'Hello)))'},\r\n        {id: 3, message: 'How are you?'},\r\n    ],\r\n}\r\n\r\nexport type InitialStateDialogsReducerType = {\r\n    dialogsData: DialogsDataType[]\r\n    messagesData: messagesDataType[]\r\n    newMessageBody?: string\r\n}\r\n\r\nexport const dialogsReducer = (state = InitialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SEND_MESSAGE: {\r\n            let body = action.newMessageBody\r\n            return  {\r\n                ...state,\r\n                //messagesData: [{id: 6, message: body},...state.messagesData]\r\n                messagesData: [...state.messagesData, {id: 4, message: body}]\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"static/media/base_87716f252d.d0d45a0e.jpg\";","import React from \"react\";\r\nimport preloader from \"../../assets/valentines-icegif-5.gif\";\r\n\r\nexport let Preloader = () => {\r\n    const divContent = {\r\n        backgroundImage: `url(${preloader})`,\r\n    };\r\n    return <div><img src={preloader}/></div>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appWrapper\":\"App_appWrapper__3bRw6\"};","module.exports = __webpack_public_path__ + \"static/media/chat_icon.0c8683b8.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__AbHs_\",\"active\":\"Navbar_active__3cINh\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport {sendMessageACType} from \"./dialogs-reducer\";\r\nimport {addPostACType} from \"./profile-reducer\";\r\nimport {UsersDataType} from \"../components/Users/Users\";\r\nimport {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const FOLLOW = 'FOLLOW'\r\nexport const UNFOLLOW = 'UNFOLLOW'\r\nexport const SET_USERS = 'SET_USERS'\r\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\nexport const SET_TOTAL_USERS_COUNT = 'SET_TOTAL_USERS_COUNT'\r\nexport const TOGGLE_IS_FETCHING = 'TOGGLE_IS_FETCHING'\r\nexport const TOGGLE_IS_FOLLOWING_PROGRESS = 'TOGGLE_IS_FOLLOWING_PROGRESS'\r\n\r\nexport type ActionsType =\r\n    addPostACType\r\n    | sendMessageACType\r\n    | toggleIsFetchingACType\r\n    | unfollowACType\r\n    | followACType\r\n    | setUsersACType\r\n    | setCurrentPageACType\r\n    | setUsersTotalCountACType\r\n    | toggleIsFollowingProgressACType\r\n\r\nlet InitialState: InitialStateType = {\r\n    users: [] as Array<UsersDataType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: false,\r\n    followingInProgress: [] as Array<number>\r\n}\r\n\r\nexport type InitialStateType = {\r\n    users: UsersDataType[]\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport const usersReducer = (state = InitialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"FOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"UNFOLLOW\":\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u\r\n                })\r\n            }\r\n        case \"SET_USERS\": {\r\n            return {...state, users: action.users}\r\n        }\r\n        case \"SET_CURRENT_PAGE\": {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case \"SET_TOTAL_USERS_COUNT\": {\r\n            return {...state, totalUsersCount: action.count}\r\n        }\r\n\r\n        case \"TOGGLE_IS_FETCHING\": {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n\r\n        case \"TOGGLE_IS_FOLLOWING_PROGRESS\": {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter((id: number) => id != action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const followSuccess = (userId: number) => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const unfollowSuccess = (userId: number) => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n}\r\n\r\nexport const setUsers = (users: UsersDataType[]) => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\n\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: SET_CURRENT_PAGE, currentPage} as const)\r\nexport const toggleIsFetching = (isFetching: boolean) => ({type: TOGGLE_IS_FETCHING, isFetching} as const)\r\nexport const toggleIsFollowingProgress = (isFetching: boolean, userId: number) => ({\r\n    type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n    isFetching,\r\n    userId\r\n} as const)\r\n\r\nexport const setTotalUsersCount = (totalUsersCount: number) => ({\r\n    type: SET_TOTAL_USERS_COUNT,\r\n    count: totalUsersCount\r\n} as const)\r\n\r\nexport const requestUsers= (currentPage: number, pageSize: number): ThunkAction<void, AppStateType, unknown, ActionsType> => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(toggleIsFetching(true))\r\n        dispatch(setCurrentPageAC(currentPage))\r\n        usersAPI.getUsers(currentPage, pageSize).then(data => {\r\n            dispatch(toggleIsFetching(false))\r\n            dispatch(setUsers(data.items))\r\n            dispatch(setTotalUsersCount(data.totalCount))\r\n        })\r\n    }\r\n}\r\n\r\nconst followUnfollowFlow = async (dispatch: Dispatch, userId: number, apiMethod: Function, actionCreator: (userId: number) => ActionsType) => {\r\n    dispatch(toggleIsFollowingProgress(true, userId))\r\n    let response = await apiMethod(userId)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(toggleIsFollowingProgress(false, userId))\r\n}\r\n\r\nexport const follow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number) => {\r\n    return (dispatch: Dispatch) => {\r\n        followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport type unfollowACType = ReturnType<typeof unfollowSuccess>\r\nexport type followACType = ReturnType<typeof followSuccess>\r\nexport type setUsersACType = ReturnType<typeof setUsers>\r\nexport type setCurrentPageACType = ReturnType<typeof setCurrentPageAC>\r\nexport type setUsersTotalCountACType = ReturnType<typeof setTotalUsersCount>\r\nexport type toggleIsFetchingACType = ReturnType<typeof toggleIsFetching>\r\nexport type toggleIsFollowingProgressACType = ReturnType<typeof toggleIsFollowingProgress>","import React from \"react\";\r\nimport {sendMessageACType} from \"./dialogs-reducer\";\r\nimport {addPostACType} from \"./profile-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {authAPI, securityAPI} from \"../api/api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\n\r\nexport const SET_USER_DATA = 'network/auth/SET_USER_DATA'\r\nexport const GET_CAPTCHA_URL_SUCCESS = 'network/auth/GET_CAPTCHA_URL_SUCCESS'\r\n\r\nexport type ActionsType = addPostACType | sendMessageACType | setAuthUserDataACType | getCaptchaUrlSuccessACType\r\n\r\nexport let InitialState: InitialStateType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false,\r\n    captchaUrl: null\r\n}\r\n\r\nexport type InitialStateType = {\r\n    userId: null | number,\r\n    email: null | string,\r\n    login: null | string,\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\nexport const authReducer = (state = InitialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA :\r\n            return {\r\n                ...state,\r\n                ...action.data\r\n            }\r\n        case GET_CAPTCHA_URL_SUCCESS :\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => {\r\n    return {\r\n        type: SET_USER_DATA,\r\n        data: {\r\n            userId,\r\n            email,\r\n            login,\r\n            isAuth\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getCaptchaUrlSuccess = (captchaUrl: string) => {\r\n    return {\r\n        type: GET_CAPTCHA_URL_SUCCESS,\r\n        payload: {\r\n            captchaUrl\r\n        }\r\n    } as const\r\n}\r\n\r\nexport const getAuthUserData = (): ThunkType => async (dispatch: Dispatch) => {\r\n     let response = await authAPI.me()\r\n        if (response.resultCode === 0) {\r\n            let {id, login, email} = response.data\r\n            dispatch(setAuthUserData(id, email, login, true))\r\n        }\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch: Dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\nexport const getCaptchaUrl = (): ThunkType => async (dispatch) => {\r\n    const response = await securityAPI.getCaptchaUrl()\r\n    const captchaUrl = response.data.url\r\n    dispatch(getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.login(email, password, rememberMe, captcha)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getAuthUserData())\r\n        } else {\r\n            if (response.data.resultCode === 10) {\r\n                dispatch(getCaptchaUrl())\r\n            }\r\n            let message = response.data.messages.length > 0 ? response.data.messages[0] : 'some error'\r\n            dispatch(stopSubmit('login', {_error: message}))\r\n        }\r\n}\r\n\r\nexport type setAuthUserDataACType = ReturnType<typeof setAuthUserData>\r\nexport type getCaptchaUrlSuccessACType = ReturnType<typeof getCaptchaUrlSuccess>","import React from \"react\";\r\nimport {ActionsType, getAuthUserData} from \"./auth-reducer\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\nimport {FormAction} from \"redux-form\";\r\n\r\nexport const INITIALISED_SUCCESS = 'INITIALISED_SUCCESS'\r\n\r\nexport let InitialState: InitialStateType = {\r\n    initialised: false\r\n}\r\n\r\nexport type InitialStateType = {\r\n    initialised: boolean\r\n}\r\n\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>\r\n\r\nexport const appReducer = (state = InitialState, action: initialisedSuccessACType) => {\r\n    switch (action.type) {\r\n        case INITIALISED_SUCCESS :\r\n            return {\r\n                ...state,\r\n                initialised: true\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const initializedSuccess = () => {\r\n    return {\r\n        type: INITIALISED_SUCCESS\r\n    } as const\r\n}\r\n\r\nexport const initializeApp = (): ThunkType => async (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    await Promise.all([promise])\r\n    dispatch(initializedSuccess());\r\n}\r\n\r\nexport type initialisedSuccessACType = ReturnType<typeof initializedSuccess>","import React from \"react\";\r\nimport {applyMiddleware, combineReducers, createStore, compose, Action} from \"redux\";\r\nimport {profileReducer} from \"./profile-reducer\";\r\nimport {dialogsReducer} from \"./dialogs-reducer\";\r\nimport {usersReducer} from \"./users-reducer\";\r\nimport {authReducer} from \"./auth-reducer\";\r\nimport thunk, {ThunkAction} from \"redux-thunk\";\r\nimport {reducer as formReducer} from \"redux-form\";\r\nimport {appReducer} from \"./app-reducer\";\r\n\r\nlet reducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    messagesPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\nexport type AppStateType = ReturnType<typeof reducers>\r\n\r\nexport let store = createStore(reducers, applyMiddleware(thunk))\r\n\r\nexport type BaseThunkType<A extends Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nwindow.store = store;","import React from \"react\";\r\nimport s from \"./Navbar.module.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nexport const Navbar = () => {\r\n    return (\r\n        <>\r\n            <nav className={s.nav}>\r\n                <div><NavLink to={'/Profile'} activeClassName={s.active}>profile</NavLink></div>\r\n                <div><NavLink to={'/Users'} activeClassName={s.active}>users</NavLink></div>\r\n                <div><NavLink to={'/Dialogs'} activeClassName={s.active}>messages</NavLink></div>\r\n                <div><NavLink to={'/News'} activeClassName={s.active}>news</NavLink></div>\r\n                <div><NavLink to={'/Music'} activeClassName={s.active}>music</NavLink></div>\r\n                <div><NavLink to={'/Settings'} activeClassName={s.active}>settings</NavLink></div>\r\n            </nav>\r\n        </>\r\n    )\r\n}","import React, {useState} from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport cn from \"classnames\";\r\n\r\nexport type PaginatorType = {\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    totalItemsCount: number\r\n    portionSize?: number\r\n}\r\n\r\n\r\nexport let Paginator = (props: PaginatorType) => {\r\n\r\n    let pagesCount = Math.ceil(props.totalItemsCount / props.pageSize);\r\n\r\n    let pages = []\r\n\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n\r\n    let portionSize = 10\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPortionNumber] = useState(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return <div className={styles.paginator}>\r\n        {portionNumber > 1 &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber - 1)\r\n        }}>PREV</button>}\r\n\r\n        {pages\r\n            .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n            .map((p) => {\r\n                return <span className={cn({\r\n                    [styles.selectedPage]: props.currentPage === p\r\n                }, styles.pageNumber)}\r\n                             key={p}\r\n                             onClick={(e) => {\r\n                                 props.onPageChanged(p);\r\n                             }}>{p}</span>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n        <button onClick={() => {\r\n            setPortionNumber(portionNumber + 1)\r\n        }}>NEXT</button>}\r\n    </div>\r\n}\r\n","import React from \"react\";\r\nimport styles from \"./Users.module.css\";\r\nimport photoCat from \"../../assets/base_87716f252d.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Paginator} from \"./Paginator\";\r\n\r\ntype PhotosType = {\r\n    small: string | undefined\r\n    large: string | undefined\r\n}\r\n\r\nexport type UsersDataType = {\r\n    name: string\r\n    id: number\r\n    uniqueUrlName: null | string\r\n    photos: PhotosType\r\n    status: null | string\r\n    followed: boolean\r\n}\r\n\r\n\r\nexport type UsersComponentType = {\r\n    setUsers: (users: UsersDataType[]) => void\r\n    users: UsersDataType[]\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    setCurrentPage: (pageNumber: number) => void\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<number>\r\n    portionSize: 10\r\n    totalItemsCount: number\r\n}\r\n\r\n\r\nexport let Users = (props: UsersComponentType) => {\r\n    return (\r\n        <div>\r\n            <Paginator pageSize={props.pageSize} totalUsersCount={props.totalUsersCount} currentPage={props.currentPage}\r\n                       onPageChanged={props.onPageChanged} portionSize={props.portionSize}\r\n                       totalItemsCount={props.totalUsersCount}/>\r\n            {props.users.map((u: UsersDataType) => <div key={u.id}>\r\n                <span>\r\n                    <div className={styles.photo}>\r\n                        <NavLink to={`/Profile/${u.id}`}><img src={u.photos.small != null ? u.photos.small : photoCat}/></NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {u.followed\r\n                            ? <button disabled={props.followingInProgress.some((id: number) => id === u.id)}\r\n                                      onClick={() => {\r\n                                          props.unfollow(u.id)\r\n                                      }}>unfollow</button>\r\n                            : <button disabled={props.followingInProgress.some((id: number) => id === u.id)}\r\n                                      onClick={() => {\r\n                                          props.follow(u.id)\r\n                                      }}> follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{u.name}</div>\r\n                        <div>{u.status}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)}\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nexport const getUsers = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n","import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {\r\n    follow, requestUsers,\r\n    setCurrentPageAC,\r\n    toggleIsFollowingProgress, unfollow,\r\n} from \"../../redux/users-reducer\";\r\nimport {Users, UsersDataType} from \"./Users\";\r\nimport {Preloader} from \"../../common/Preloader/Preloader\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getTotalUsersCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\nimport {getPageSize} from \"../../redux/users-selectors\";\r\n\r\ntype UsersContainerPropsType = {\r\n    requestUsers: (currentPage: number, pageSize: number) => void\r\n    currentPage: number\r\n    pageSize: number\r\n    isFetching: boolean\r\n    users: Array<UsersDataType>\r\n    setUsers: () => void\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    totalUsersCount: number\r\n    setCurrentPage: () => void\r\n    followingInProgress: Array<number>\r\n    portionSize: 10\r\n}\r\n\r\nclass UsersContainer extends React.Component<UsersContainerPropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.requestUsers(this.props.currentPage, this.props.pageSize)\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.requestUsers(pageNumber, this.props.pageSize)\r\n    }\r\n\r\n    render() {\r\n        return <>\r\n            {this.props.isFetching ? <Preloader/> : null}\r\n            <Users users={this.props.users} setUsers={this.props.setUsers}\r\n                   totalUsersCount={this.props.totalUsersCount}\r\n                   currentPage={this.props.currentPage} onPageChanged={this.onPageChanged}\r\n                   setCurrentPage={this.props.setCurrentPage} pageSize={this.props.pageSize}\r\n                   follow={this.props.follow} unfollow={this.props.unfollow}\r\n                   followingInProgress={this.props.followingInProgress}\r\n                   totalItemsCount={this.props.totalUsersCount}\r\n                   portionSize={this.props.portionSize}\r\n            />\r\n        </>\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    follow, unfollow, setCurrentPageAC, toggleIsFollowingProgress, requestUsers\r\n})\r\n(UsersContainer)","import React from \"react\";\r\nimport s from \"./Header.module.css\";\r\nimport Logo from \"../../assets/chat_icon.jpg\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type HeaderPropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => Promise<void>\r\n}\r\n\r\nexport const Header = (props: HeaderPropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img className={s.photo} src={Logo}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>log out</button></div>\r\n                    : <NavLink to={'/login'}>login</NavLink>}\r\n            </div>\r\n        </header>\r\n    )\r\n}","import React from \"react\";\r\nimport {Header, HeaderPropsType} from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\nclass HeaderContainer extends React.Component<HeaderPropsType> {\r\n    render() {\r\n        return <Header isAuth={this.props.isAuth} login={this.props.login} logout={this.props.logout}/>\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    isAuth: state.auth.isAuth,\r\n    login: state.auth.login,\r\n})\r\n\r\nexport default connect(mapStateToProps, {logout})(HeaderContainer)","import React from \"react\";\r\nimport {reduxForm, InjectedFormProps} from \"redux-form\";\r\nimport {Field} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {requiredField} from \"../../utils/validators\";\r\nimport {connect} from \"react-redux\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport s from '../../common/FormsControls/FormsControls.module.css'\r\n\r\nexport type LoginFormValuesType = {\r\n    captcha: string\r\n    rememberMe: boolean\r\n    password: string\r\n    email: string\r\n}\r\n\r\ntype LoginFormOwnProps = {\r\n    captchaUrl: string | null\r\n    onSubmit: any\r\n}\r\n\r\nexport const LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                                       handleSubmit,\r\n                                                                                                                       error,\r\n                                                                                                                       captchaUrl\r\n                                                                                                                   }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div><Field validate={[requiredField]} placeholder={'email'} name={'email'} component={Input}/></div>\r\n            <div><Field validate={[requiredField]} placeholder={'password'} name={'password'} type={'password'}\r\n                        component={Input}/></div>\r\n            <div>\r\n                <Field type={'checkbox'} name={'rememberMe'} component={Input}/>remember me\r\n            </div>\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl &&\r\n            <Field validate={[requiredField]} name={'captcha'} component={Input} placeholder={'symbols from image'}/>}\r\n            {error && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnProps>({form: 'login'})(LoginForm)\r\n\r\nexport type FormDataType = {\r\n    login: (email: string, password: string, rememberMe: boolean, captcha: string) => Promise<void>\r\n    isAuth: boolean\r\n    captchaUrl: string | null\r\n}\r\n\r\nconst Login = (props: FormDataType) => {\r\n    const onSubmit = (formData: { email: string, password: string, rememberMe: boolean, captcha: string }) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe, formData.captcha)\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={'/Profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h1>login</h1>\r\n            <LoginReduxForm captchaUrl={props.captchaUrl} onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    captchaUrl: state.auth.captchaUrl,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login)\r\n","import React, {Component, Suspense} from 'react';\r\nimport s from './App.module.css'\r\nimport {Navbar} from \"./components/Navbar/Navbar\";\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport UsersContainer from './components/Users/UsersContainer';\r\nimport HeaderContainer from './components/Header/HeaderContainer';\r\nimport Login from './components/Login/Login';\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\nimport {initializeApp} from './redux/app-reducer'\r\nimport { Preloader } from './common/Preloader/Preloader';\r\n\r\n\r\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'))\r\nconst ProfileContainer = React.lazy(() => import('./components/Profile/ProfileContainer'))\r\n\r\nexport type AppType = {\r\n    initializeApp: ()=> void\r\n    initialized: boolean\r\n    setUsers: () => void\r\n    portionSize: 10\r\n    setCurrentPage: () => void\r\n}\r\n\r\nclass App extends Component<AppType> {\r\n    catchAllUnhandledError = (PromiseRejectionEvent: Event) => {\r\n        console.log('error')\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledError)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledError)\r\n    }\r\n\r\n    render() {\r\n          // if (!this.props.initialized) {\r\n          //      return <Preloader/>\r\n          //  }\r\n        return (\r\n            <div className={s.appWrapper}>\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <Route path={'/Dialogs'} render={() => {\r\n                    return <Suspense fallback={<div>loading..</div>}><DialogsContainer/></Suspense>\r\n                }}/>\r\n                <Route path={'/Profile/:userId?'} render={() => {\r\n                    return <Suspense fallback={<div>loading..</div>}><ProfileContainer/></Suspense>\r\n                }}/>\r\n                <Route path={'/Users'} render={() => <UsersContainer setUsers={this.props.setUsers}\r\n                                                                     portionSize={this.props.portionSize}\r\n                                                                     setCurrentPage={this.props.setCurrentPage}/>}/>\r\n                <Route path={'/login'} render={() => <Login/>}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType) => ({\r\n    initialised: state.app.initialised\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps, {initializeApp}))(App);","import * as serviceWorker from './serviceWorker';\r\nimport './index.css'\r\nimport React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport './index.css'\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport { store } from './redux/redux-store';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n// API\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__2HyMZ\",\"selectedPage\":\"Users_selectedPage__3tx_c\",\"paginator\":\"Users_paginator__2U0sV\",\"pageNumber\":\"Users_pageNumber__2KH7g\"};","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\nimport { WrappedFieldMetaProps} from \"redux-form/lib/Field\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\n\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n\r\n    return (\r\n        <div className={hasError ? s.error : ''}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            <div>\r\n                {hasError && <span>{error}</span>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<any> = (props) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}> <textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}> <input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n","import React from \"react\";\r\n\r\nexport const requiredField = (value: string) => {\r\n    if(value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required!'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if(value && value.length > maxLength) {\r\n        return `Max length is ${maxLength} symbols`\r\n    }\r\n    return undefined\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"error\":\"FormsControls_error__294w8\",\"formSummaryError\":\"FormsControls_formSummaryError__OZZ8S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Header_photo__1sN_j\",\"header\":\"Header_header__XGCjP\",\"loginBlock\":\"Header_loginBlock__cv9yn\"};","module.exports = __webpack_public_path__ + \"static/media/valentines-icegif-5.43f6eff4.gif\";","import React from \"react\";\r\nimport {PostDataType} from \"./store\";\r\nimport {sendMessageACType} from \"./dialogs-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {stopSubmit} from \"redux-form\";\r\nimport {BaseThunkType} from \"./redux-store\";\r\n\r\nconst ADD_POST = 'ADD-POST'\r\nconst SET_USER_PROFILE = 'SET_USER_PROFILE'\r\nconst SET_STATUS = 'SET_STATUS'\r\nconst DELETE_POST = 'DELETE_POST'\r\nconst SAVE_PHOTO = 'SAVE_PHOTO'\r\n\r\ntype ThunkType = BaseThunkType<ActionsType>\r\n\r\nexport type addPostACType = ReturnType<typeof addPostAC>\r\nexport type setUserProfileType = ReturnType<typeof setUserProfile>\r\nexport type setStatusACType = ReturnType<typeof setStatus>\r\nexport type deletePostType = ReturnType<typeof deletePost>\r\nexport type savePhotoSuccessType = ReturnType<typeof savePhotoSuccess>\r\n\r\nexport type ActionsType =\r\n    addPostACType\r\n    | sendMessageACType\r\n    | setUserProfileType\r\n    | setStatusACType\r\n    | deletePostType\r\n    | savePhotoSuccessType\r\n\r\nexport const addPostAC = (newPostText: string) => {\r\n    return {\r\n        type: ADD_POST,\r\n        newPostText\r\n    } as const\r\n}\r\n\r\nexport const setStatus = (status: string) => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    } as const\r\n}\r\n\r\nexport const setUserProfile = (profile: null | ProfileType) => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\n\r\nexport const deletePost = (id: number) => {\r\n    return {\r\n        type: DELETE_POST,\r\n        id\r\n    } as const\r\n}\r\n\r\nexport const savePhotoSuccess = (photos: PhotosType) => {\r\n    return {\r\n        type: SAVE_PHOTO,\r\n        photos\r\n    } as const\r\n}\r\n\r\nexport const getUserProfile: any = (userId: number) => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await usersAPI.getProfile(userId)\r\n        dispatch(setUserProfile(response.data))\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => {\r\n    return async (dispatch: Dispatch) => {\r\n        let response = await profileAPI.getStatus(userId)\r\n        dispatch(setStatus(response.data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        try {\r\n            profileAPI.updateStatus(status).then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(setStatus(status))\r\n                }\r\n            })\r\n        } catch (error) {\r\n\r\n        }\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => {\r\n    return async (dispatch) => {\r\n        let response = await profileAPI.savePhoto(file)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(savePhotoSuccess(response.data.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: null | ProfileType): ThunkType => {\r\n    return async (dispatch: Dispatch, getState) => {\r\n        const userId = getState().auth.userId\r\n        const response = await profileAPI.saveProfile(profile)\r\n        if (response.data.resultCode === 0) {\r\n            dispatch(getUserProfile(userId))\r\n        } else {\r\n            dispatch(stopSubmit('edit-profile', {_error: response.data.messages[0]}))\r\n            return Promise.reject(response.data.messages[0])\r\n        }\r\n    }\r\n}\r\n\r\nlet InitialState: InitialStateType = {\r\n    postData: [\r\n        {id: 1, message: 'I like ice cream!', likesCount: 3},\r\n        {id: 2, message: 'Hello world!', likesCount: 5},\r\n        {id: 3, message: 'juice and cake', likesCount: 10},\r\n    ],\r\n    newPostText: 'this is new social network',\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nexport type ContactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type ProfileType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: ContactsType\r\n    photos: PhotosType\r\n    aboutMe: string\r\n}\r\n\r\nexport type InitialStateType = {\r\n    postData: PostDataType[]\r\n    newPostText: string\r\n    profile: ProfileType | null | {photos: PhotosType}\r\n    status: string\r\n}\r\n\r\nexport const profileReducer = (state = InitialState, action: ActionsType) => {\r\n    switch (action.type) {\r\n        case \"ADD-POST\": {\r\n            let newPost = {id: 4, message: action.newPostText, likesCount: 0}\r\n            return {\r\n                ...state,\r\n                postData: [newPost, ...state.postData],\r\n                newPostText: ''\r\n            }\r\n        }\r\n        case \"SET_USER_PROFILE\": {\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        }\r\n        case \"SET_STATUS\": {\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        }\r\n        case \"DELETE_POST\": {\r\n            return {\r\n                ...state, postData: state.postData.filter(p => p.id != action.id)\r\n            }\r\n        }\r\n        case \"SAVE_PHOTO\": {\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos}\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}