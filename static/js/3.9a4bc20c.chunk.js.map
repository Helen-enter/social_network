{"version":3,"sources":["components/Profile/Profile.module.css","assets/tmb.jpg","components/Profile/MyPost/Post/Post.module.css","assets/cat.jpg","components/Profile/MyPost/MyPost.module.css","components/Profile/ProfileInfo/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPost/Post/Post.tsx","components/Profile/MyPost/MyPost.tsx","components/Profile/MyPost/MyPostContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["module","exports","ProfileStatusWithHooks","props","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","autoFocus","onBlur","updateStatus","onChange","e","currentTarget","value","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","error","profile","onSubmit","className","s","formSummaryError","placeholder","Field","name","component","Input","type","Textarea","Object","keys","contacts","map","key","contact","ProfileInfo","divContent","backgroundImage","image","Preloader","content","mainContent","style","avatar","src","photos","large","photo","owner","target","files","length","savePhoto","initialValues","formData","saveProfile","then","isOwner","goToEditMode","ProfileData","onClick","fullName","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","Post","postBlock","message","likesCount","MyPost","nextProps","nextState","nextContext","this","state","postElements","postData","p","id","postsBlock","AddNewPostFormRedux","values","addPost","newPostText","React","PureComponent","maxLength10","maxLengthCreator","validate","requiredField","MyPostContainer","connect","profilePage","dispatch","addPostAC","Profile","ProfileContainer","userId","match","params","authorisedUserId","history","push","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.9a4bc20c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"Profile_content__1FgOc\",\"mainContent\":\"Profile_mainContent__2B38x\",\"avatar\":\"Profile_avatar__eJBid\",\"contact\":\"Profile_contact__3GKgz\"};","module.exports = __webpack_public_path__ + \"static/media/tmb.842eb8ed.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Post_photo__2KQAl\",\"postBlock\":\"Post_postBlock__2ft9L\"};","module.exports = __webpack_public_path__ + \"static/media/cat.b2623a71.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPost_postsBlock__n45dr\"};","import React, {useEffect, useState} from \"react\";\r\n\r\nexport type ProfileStatusType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusType) => {\r\n\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: React.SyntheticEvent<any>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {!editMode &&\r\n            <div>\r\n                <span onDoubleClick={activateEditMode}>{props.status || 'No status'}</span>\r\n            </div>}\r\n            {editMode &&\r\n            <div>\r\n                <input autoFocus={true} onBlur={deactivateEditMode} onChange={onStatusChange} value={status}/>\r\n            </div>}\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {Field, InjectedFormProps} from \"redux-form\";\r\nimport {Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport s from \"../Profile.module.css\";\r\nimport {reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n}\r\n\r\nexport const ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType> & PropsType> = ({handleSubmit, error, profile}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <div>\r\n                    <button>save</button>\r\n                </div>\r\n                {error && <div className={s.formSummaryError}>\r\n                    {error}\r\n                </div>}\r\n                <div>\r\n                    <b>Full name</b>:\r\n                    <input placeholder={'fullName'}/>\r\n                    <Field name={'fullName'} placeholder={'fullName'} component={Input}/>\r\n                </div>\r\n                <div>\r\n                    <b>Looking for a job</b>:\r\n                    <Field name={'lookingForAJob'} type={'checkbox'}\r\n                           component={Input}/>\r\n                </div>\r\n                <div>\r\n                    <b>My professional skills</b>:\r\n                    <Field name={'lookingForAJobDescription'} type={'password'} placeholder={'My professional skills'}\r\n                           component={Textarea}/>\r\n                </div>\r\n\r\n                <div>\r\n                    <b>About me</b>:\r\n                    <Field placeholder={'About me'} name={'AboutMe'} type={'password'}\r\n                           component={Textarea}/>\r\n                </div>\r\n                <div>\r\n                    <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n                    return <div className={s.contact}>\r\n                        <b>{key}:</b> <Field component={Input} name={`contacts${key}`} placeholder={key}/>\r\n                    </div>\r\n                })}\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport const ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm)","import React, {useState, ChangeEvent} from \"react\";\r\nimport s from \"../Profile.module.css\";\r\nimport image from \"../../../assets/tmb.jpg\";\r\nimport {Preloader} from \"../../../common/Preloader/Preloader\";\r\nimport {ProfileStatusWithHooks} from \"./ProfileStatusWithHooks\";\r\nimport photo from '../../../assets/base_87716f252d.jpg'\r\nimport {ProfileDataFormReduxForm} from \"./ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../redux/profile-reducer\";\r\n\r\nexport type ProfileInfoType = {\r\n    profile: ProfileType | null\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    owner: boolean\r\n    savePhoto: (files: File) => void\r\n    fullName: string\r\n    lookingForAJob: string\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    saveProfile: (formData: ProfileType) => Promise<void>\r\n}\r\n\r\nexport const ProfileInfo: React.FC<ProfileInfoType> = (props) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const divContent = {\r\n        backgroundImage: `url(${image})`,\r\n    };\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files && e.target.files.length) {\r\n            props.savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        props.saveProfile(formData).then(() => {\r\n            setEditMode(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className={s.content}>\r\n            <div className={s.mainContent} style={divContent}>\r\n                Main content\r\n            </div>\r\n            <div>\r\n                <img className={s.avatar} src={props.profile.photos.large || photo}/>\r\n                {props.owner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n                <ProfileStatusWithHooks status={props.status} updateStatus={props.updateStatus}/>\r\n                ava + description\r\n                {editMode\r\n                    ? <ProfileDataFormReduxForm initialValues={props.profile} profile={props.profile}\r\n                                                onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={props.profile} isOwner={props.owner}\r\n                                   goToEditMode={() => setEditMode(true)}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ProfileDataType = {\r\n    profile: ProfileType\r\n    isOwner: boolean\r\n    goToEditMode: () => void\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataType> = ({profile, isOwner, goToEditMode}) => {\r\n    return <div>\r\n        {isOwner && <div>\r\n            <button onClick={goToEditMode}>edit</button>\r\n        </div>}\r\n        <div>\r\n            <b>Full name</b>: {profile.fullName}\r\n        </div>\r\n        <div>\r\n            <b>Looking for a job</b>: {profile.lookingForAJob ? \"yes\" : \"no\"}\r\n        </div>\r\n        {profile.lookingForAJob &&\r\n        <div>\r\n            <b>My professional skills</b>: {profile.lookingForAJobDescription}\r\n        </div>\r\n        }\r\n\r\n        <div>\r\n            <b>About me</b>: {profile.aboutMe}\r\n        </div>\r\n        <div>\r\n            <b>Contacts</b>: {Object.keys(profile.contacts).map(key => {\r\n            return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n        })}\r\n        </div>\r\n    </div>\r\n}\r\n\r\ntype ContactPropsType = {\r\n    contactTitle: string, contactValue: string\r\n}\r\n\r\nconst Contact = (props: ContactPropsType) => {\r\n    return <div className={s.contact}><b>{props.contactTitle}</b>: {props.contactValue}</div>\r\n}","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\nimport image from \"../../../../assets/cat.jpg\";\r\nimport {PostDataType} from \"../../../../redux/store\";\r\n\r\nexport const Post = (props: PostDataType) => {\r\n    const divContent = {\r\n        backgroundImage: `url(${image})`,\r\n    };\r\n    return (\r\n        <div className={s.postBlock}>\r\n            New post\r\n            <div className={s.photo} style={divContent}></div>\r\n            <div>{props.message}</div>\r\n            <div>like {props.likesCount}</div>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Post} from \"./Post/Post\";\r\nimport s from './MyPost.module.css'\r\nimport {PostDataType} from \"../../../redux/store\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {maxLengthCreator, requiredField} from \"../../../utils/validators\";\r\nimport {Textarea} from \"../../../common/FormsControls/FormsControls\";\r\n\r\ntype MyPostType = {\r\n    postData: PostDataType[]\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nexport type AddPostFormValuesType = {\r\n    newPostText: string\r\n}\r\n\r\ntype PropsType = {}\r\n\r\nexport class MyPost extends React.PureComponent<MyPostType> {\r\n\r\n    shouldComponentUpdate(nextProps: Readonly<MyPostType>, nextState: Readonly<{}>, nextContext: any): boolean {\r\n        return nextProps != this.props || nextState != this.state\r\n    }\r\n\r\n    render() {\r\n        let postElements = this.props.postData.map((p) => <Post id={p.id} message={p.message}\r\n                                                                likesCount={p.likesCount}/>)\r\n\r\n        let onAddPost = (values: AddPostFormValuesType) => {\r\n            this.props.addPost(values.newPostText)\r\n        }\r\n        return (\r\n            <div className={s.postsBlock}>\r\n                <h3>My post</h3>\r\n                <AddNewPostFormRedux onSubmit={onAddPost}/>\r\n                {postElements}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst maxLength10 = maxLengthCreator(10)\r\n\r\nexport const AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field name='newPostText' component={Textarea} validate={[requiredField, maxLength10]}/>\r\n            </div>\r\n            <div>\r\n                <button>add post</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nlet AddNewPostFormRedux = reduxForm<AddPostFormValuesType, PropsType>({form: 'ProfileAddNewPostForm'})(AddNewPostForm)","import React from \"react\";\r\nimport {addPostAC} from \"../../../redux/profile-reducer\";\r\nimport {MyPost} from \"./MyPost\";\r\nimport {StateType} from \"../../../redux/store\";\r\nimport {connect} from \"react-redux\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nlet mapStateToProps = (state: StateType) => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n        newPostText: state.profilePage.newPostText\r\n    }\r\n}\r\n\r\nlet mapDispatchToProps = (dispatch: Dispatch) => {\r\n    return {\r\n        addPost: (newPostText: string) => dispatch(addPostAC(newPostText))\r\n    }\r\n}\r\n\r\nexport const MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost)\r\n","import React from \"react\";\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostContainer} from \"./MyPost/MyPostContainer\";\r\nimport {ContactsType, ProfileType} from \"../../redux/profile-reducer\";\r\n\r\nexport type ProfilePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    owner: boolean\r\n    savePhoto: (files: File) => void\r\n    fullName: string\r\n    lookingForAJob: string\r\n    aboutMe: string\r\n    contacts: ContactsType\r\n    saveProfile: (formData: ProfileType) => Promise<void>\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}\r\n                         owner={props.owner} savePhoto={props.savePhoto} lookingForAJob={props.lookingForAJob}\r\n                         aboutMe={props.aboutMe} contacts={props.contacts} fullName={props.fullName}\r\n                         saveProfile={props.saveProfile}/>\r\n            <MyPostContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {ContactsType, getUserProfile, ProfileType} from \"../../redux/profile-reducer\";\r\nimport {withRouter} from \"react-router-dom\";\r\nimport {compose} from \"redux\";\r\nimport {getStatus, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {savePhoto} from \"../../redux/profile-reducer\";\r\nimport {saveProfile} from \"../../redux/profile-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype ProfileContainerPropsType = {\r\n    authorisedUserId: number\r\n    history: Array<string>\r\n    getUserProfile: (userId: number) => void\r\n    getStatus: (userId: number) => void\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: () => void\r\n    lookingForAJob: string\r\n    contacts: ContactsType\r\n    saveProfile: (formData: ProfileType) => Promise<void>\r\n    savePhoto: () => void\r\n    fullName: string\r\n    aboutMe: string\r\n    match: {\r\n        params: {\r\n            userId: number\r\n        }\r\n    }\r\n}\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    refreshProfile() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorisedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n\r\n    componentDidUpdate(prevProps: Readonly<ProfileContainerPropsType>, prevState: Readonly<any>) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profile={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus} owner={!this.props.match.params.userId}\r\n                     savePhoto={this.props.savePhoto} fullName={this.props.fullName} contacts={this.props.contacts}\r\n                     aboutMe={this.props.aboutMe} lookingForAJob={this.props.lookingForAJob}\r\n                     saveProfile={this.props.saveProfile}/>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType) => ({\r\n    profile: state.profilePage.profile,\r\n    state: state.profilePage.status,\r\n    authorisedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    // WithAuthRedirect\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}